<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lixing.siitep.mapper.TbWorkAttendanceMapper">
  <resultMap id="BaseResultMap" type="com.lixing.siitep.entity.TbWorkAttendance">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="s_name" jdbcType="VARCHAR" property="sName" />
    <result column="c_name" jdbcType="VARCHAR" property="cName" />
    <result column="have_class" jdbcType="INTEGER" property="haveClass" />
    <result column="have_late" jdbcType="INTEGER" property="haveLate" />
    <result column="have_absent" jdbcType="INTEGER" property="haveAbsent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, s_name, c_name, have_class, have_late, have_absent
  </sql>
  <select id="selectByExample" parameterType="com.lixing.siitep.entity.TbWorkAttendanceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_work_attendance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_work_attendance
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_work_attendance
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lixing.siitep.entity.TbWorkAttendanceExample">
    delete from tb_work_attendance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lixing.siitep.entity.TbWorkAttendance">
    insert into tb_work_attendance (id, s_name, c_name, 
      have_class, have_late, have_absent
      )
    values (#{id,jdbcType=INTEGER}, #{sName,jdbcType=VARCHAR}, #{cName,jdbcType=VARCHAR}, 
      #{haveClass,jdbcType=INTEGER}, #{haveLate,jdbcType=INTEGER}, #{haveAbsent,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lixing.siitep.entity.TbWorkAttendance">
    insert into tb_work_attendance
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="sName != null">
        s_name,
      </if>
      <if test="cName != null">
        c_name,
      </if>
      <if test="haveClass != null">
        have_class,
      </if>
      <if test="haveLate != null">
        have_late,
      </if>
      <if test="haveAbsent != null">
        have_absent,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="sName != null">
        #{sName,jdbcType=VARCHAR},
      </if>
      <if test="cName != null">
        #{cName,jdbcType=VARCHAR},
      </if>
      <if test="haveClass != null">
        #{haveClass,jdbcType=INTEGER},
      </if>
      <if test="haveLate != null">
        #{haveLate,jdbcType=INTEGER},
      </if>
      <if test="haveAbsent != null">
        #{haveAbsent,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lixing.siitep.entity.TbWorkAttendanceExample" resultType="java.lang.Long">
    select count(*) from tb_work_attendance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_work_attendance
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.sName != null">
        s_name = #{record.sName,jdbcType=VARCHAR},
      </if>
      <if test="record.cName != null">
        c_name = #{record.cName,jdbcType=VARCHAR},
      </if>
      <if test="record.haveClass != null">
        have_class = #{record.haveClass,jdbcType=INTEGER},
      </if>
      <if test="record.haveLate != null">
        have_late = #{record.haveLate,jdbcType=INTEGER},
      </if>
      <if test="record.haveAbsent != null">
        have_absent = #{record.haveAbsent,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_work_attendance
    set id = #{record.id,jdbcType=INTEGER},
      s_name = #{record.sName,jdbcType=VARCHAR},
      c_name = #{record.cName,jdbcType=VARCHAR},
      have_class = #{record.haveClass,jdbcType=INTEGER},
      have_late = #{record.haveLate,jdbcType=INTEGER},
      have_absent = #{record.haveAbsent,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lixing.siitep.entity.TbWorkAttendance">
    update tb_work_attendance
    <set>
      <if test="sName != null">
        s_name = #{sName,jdbcType=VARCHAR},
      </if>
      <if test="cName != null">
        c_name = #{cName,jdbcType=VARCHAR},
      </if>
      <if test="haveClass != null">
        have_class = #{haveClass,jdbcType=INTEGER},
      </if>
      <if test="haveLate != null">
        have_late = #{haveLate,jdbcType=INTEGER},
      </if>
      <if test="haveAbsent != null">
        have_absent = #{haveAbsent,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lixing.siitep.entity.TbWorkAttendance">
    update tb_work_attendance
    set s_name = #{sName,jdbcType=VARCHAR},
      c_name = #{cName,jdbcType=VARCHAR},
      have_class = #{haveClass,jdbcType=INTEGER},
      have_late = #{haveLate,jdbcType=INTEGER},
      have_absent = #{haveAbsent,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="sum" resultType="java.util.Map" parameterType="com.lixing.siitep.entity.TbWorkAttendanceExample">
    select count(id) sum,
    count(IF ( have_class !=0, TRUE, NULL )) haveclass,
    count(IF ( have_class =1, TRUE, NULL )) stuclass,
    count(IF ( have_late !=0, TRUE, NULL ))sumlate,
    count(IF ( have_absent !=0,TRUE,NULL))sumabsent
    from tb_work_attendance
</select>
  <select id="getMoM" resultType="java.util.Map" parameterType="com.lixing.siitep.entity.TbWorkAttendanceExample">
  select
    count(IF ( have_absent=1,TRUE,NULL))stuleave,
    count(IF ( have_absent=2,TRUE,NULL))stuabsenteism

    from tb_work_attendance
</select>


</mapper>